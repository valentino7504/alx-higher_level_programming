7-base_geometry.py
===================

Tests
======

Importing the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> len(__import__('7-base_geometry').BaseGeometry.__doc__) > 1
    True
    >>> len(__import__('7-base_geometry').__doc__) > 1
    True
    >>> len(__import__('7-base_geometry').BaseGeometry.area.__doc__) > 1
    True
    >>> len(__import__('7-base_geometry').BaseGeometry.integer_validator.__doc__) > 1
    True

Testing area:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented
    >>> bg = BaseGeometry()
    >>> bg.area("Edwin")
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Default test with normal values:
    >>> bg.integer_validator("Edwin", 22)

Testing the function with no argument:
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing the function with one argument:
    >>> bg.integer_validator("Edwin")
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
    >>> bg.integer_validator(value=22)
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'name'

More than required number of arguments:
    >>> bg.integer_validator("Edwin", 34, 55)
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

Test with non integers:
    >>> bg.integer_validator("Edwin", "Left")
    Traceback (most recent call last):
        ...
    TypeError: Edwin must be an integer
    >>> bg.integer_validator("Another string", 34.6)
    Traceback (most recent call last):
        ...
    TypeError: Another string must be an integer
    >>> bg.integer_validator("my_int", None)
    Traceback (most recent call last):
        ...
    TypeError: my_int must be an integer
    >>> bg.integer_validator("my_int", [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: my_int must be an integer
    >>> bg.integer_validator("my_int", True)
    Traceback (most recent call last):
        ...
    TypeError: my_int must be an integer
    >>> bg.integer_validator("my_int", {"hi", 4})
    Traceback (most recent call last):
        ...
    TypeError: my_int must be an integer

Test with 0 and negative numbers:
    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
        ...
    ValueError: my_int must be greater than 0
    >>> bg.integer_validator("value", -3)
    Traceback (most recent call last):
        ...
    ValueError: value must be greater than 0
    >>> bg.integer_validator("val", -2.5)
    Traceback (most recent call last):
        ...
    TypeError: val must be an integer

