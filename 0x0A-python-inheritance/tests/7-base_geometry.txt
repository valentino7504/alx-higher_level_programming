7-base_geometry.py
===================

Tests
======

Importing the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> len(__import__('7-base_geometry').BaseGeometry.__doc__) > 1
    True
    >>> len(__import__('7-base_geometry').__doc__) > 1
    True
    >>> len(__import__('7-base_geometry').BaseGeometry.area.__doc__) > 1
    True
    >>> len(__import__('7-base_geometry').BaseGeometry.integer_validator.__doc__) > 1
    True

Testing area:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented
    >>> bg = BaseGeometry()
    >>> bg.area("Edwin")
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Default test with normal values:
    >>> bg.integer_validator("Edwin", 22)

Test with 0 and negative numbers:
    >>> bg.integer_validator("test_value", 0)
    Traceback (most recent call last):
        ...
    ValueError: test_value must be greater than 0
    >>> bg.integer_validator("mine", -3)
    Traceback (most recent call last):
        ...
    ValueError: mine must be greater than 0
    >>> bg.integer_validator("val", -2.5)
    Traceback (most recent call last):
        ...
    TypeError: val must be an integer

Test with non integers:

	  >>> bg.integer_validator("bool", True)
	  Traceback (most recent call last):
          ...
          TypeError: bool must be an integer
	  >>> bg.integer_validator("float", 1.5)
          Traceback (most recent call last):
          ...
          TypeError: float must be an integer
	  >>> bg.integer_validator("complex", complex(1, 1))
          Traceback (most recent call last):
          ...
          TypeError: complex must be an integer
	  >>> bg.integer_validator("string", "hello")
          Traceback (most recent call last):
          ...
          TypeError: string must be an integer
	  >>> bg.integer_validator("tuple", (1, 2))
          Traceback (most recent call last):
          ...
          TypeError: tuple must be an integer
	  >>> bg.integer_validator("list", [1, 2, 3])
	  Traceback (most recent call last):
          ...
          TypeError: list must be an integer
	  >>> bg.integer_validator("dict", {"key": "value"})
          Traceback (most recent call last):
          ...
          TypeError: dict must be an integer
	  >>> bg.integer_validator("set", {"hello", "world"})
          Traceback (most recent call last):
          ...
          TypeError: set must be an integer
	  >>> bg.integer_validator("frozenset", frozenset(["hello", "world"]))
          Traceback (most recent call last):
          ...
          TypeError: frozenset must be an integer
	  >>> bg.integer_validator("bytes", b"bytes")
          Traceback (most recent call last):
          ...
          TypeError: bytes must be an integer
	  >>> bg.integer_validator("bytearrays", bytearray(b"bytes"))
          Traceback (most recent call last):
          ...
          TypeError: bytearrays must be an integer

Testing the function with no argument:
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing the function with one argument:
    >>> bg.integer_validator("Edwin")
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

More than required number of arguments:
    >>> bg.integer_validator("Edwin", 34, 55)
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
